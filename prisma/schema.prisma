datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Add these models to your schema

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  name            String?
  passwordHash    String
  isEmailVerified Boolean         @default(false)
  emailVerificationToken String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  subscriptions   VIPSubscription[]
  passwordResetTokens PasswordResetToken[]
  // Add other user-related fields as needed
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Package {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  durations       Json            // Store durations as JSON: { twoWeeks: { price: number, enabled: boolean }, ... }
  countries       String[]        // Country codes, empty array means global
  status          String          @default("active") // active, inactive
  subscribers     Int             @default(0)
  revenue         Float           @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  subscriptions   VIPSubscription[]
  // Add other package-related fields as needed
}

model VIPSubscription {
  id                  Int       @id @default(autoincrement())
  userId              Int
  packageId           Int
  startDate           DateTime
  endDate             DateTime
  status              String    @default("active") // active, grace_period, expired
  lastNotificationDate DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id])
  package             Package   @relation(fields: [packageId], references: [id])
  accessLogs          VIPAccessLog[]
}

model VIPAccessLog {
  id              Int       @id @default(autoincrement())
  subscriptionId  Int
  action          String    // status_changed_to_active, status_changed_to_expired, etc.
  timestamp       DateTime
  subscription    VIPSubscription @relation(fields: [subscriptionId], references: [id])
}


// VIP Prediction Category
model VIPPredictionCategory {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  description String?
  successRate Float         @default(0)
  totalPicks  Int           @default(0)
  predictions VIPPrediction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// VIP Prediction
model VIPPrediction {
  id          Int                   @id @default(autoincrement())
  categoryId  Int
  category    VIPPredictionCategory @relation(fields: [categoryId], references: [id])
  homeTeam    String
  awayTeam    String
  league      String
  matchTime   DateTime
  prediction  String
  odds        Float
  analysis    String
  confidence  Int
  status      String                @default("pending") // pending, won, lost
  result      String?
  isArchived  Boolean               @default(false)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  createdBy   Int                   // Admin user ID
  publishAt   DateTime              @default(now())
  
  matchId     Int?
  match       Match?                @relation(fields: [matchId], references: [id])
}

// General Prediction
model Prediction {
  id          Int       @id @default(autoincrement())
  homeTeam    String
  awayTeam    String
  league      String
  matchTime   DateTime
  prediction  String
  odds        Float?
  confidence  Int?
  status      String    @default("upcoming") // upcoming, completed, cancelled
  result      String?   // e.g., "2-1", "Draw", "Won", "Lost"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Match (for Upcoming Matches)
model Match {
  id          Int       @id @default(autoincrement())
  homeTeam    String
  homeTeamLogo String?
  awayTeam    String
  awayTeamLogo String?
  league      String
  leagueLogo  String?
  matchTime   DateTime
  stadium     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Testimonial
model Testimonial {
  id        Int       @id @default(autoincrement())
  author    String
  rating    Float     @default(5.0) // e.g., 1.0 to 5.0
  content   String
  source    String?   // e.g., "Trustpilot", "Google Reviews", "Direct"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Team Member
model TeamMember {
  id        Int       @id @default(autoincrement())
  name      String
  role      String
  bio       String?
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}